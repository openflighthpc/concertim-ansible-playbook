CT_SRC_DIR = [ ENV['FLIGHT_CODE'], "#{ENV['HOME']}/projects/concertim/src" ]
  .compact
  .map { |p| File.expand_path(p) }
  .detect { |p| File.directory?(p) }
ANSIBLE_DIR="../ansible"
MACHINES = [
  {
    name: "command1",
    box: "ubuntu/jammy64",
  },
  {
    name: "command2",
    # box: "bento/ubuntu-22.04",
    box: "ubuntu/jammy64",
  },
  {
    name: "command3",
    # box: "ubuntu/focal64",
    box: "ubuntu/jammy64",
  }
]

Vagrant.configure("2") do |config|
  MACHINES.each_with_index do |box, idx|
    config.vm.provider "virtualbox" do |v|
      # v.memory = 8192
      # v.memory = 4096
      # v.memory = 3072
      v.memory = 2048
    end

    config.vm.define box[:name], primary: idx == 0 do |v|
      v.vm.box = box[:box]
      v.vm.hostname = box[:name]
      v.vm.network "forwarded_port", guest:  80, host: 9080 + idx + 1, host_ip: '127.0.0.1'
      v.vm.network "forwarded_port", guest: 443, host: 9443 + idx + 1, host_ip: '127.0.0.1'
      v.vm.provision "swap",
        type: "shell",
        path: "scripts/create-swap.sh",
        run: "never"
      v.vm.provision "apt-upgrade",
        type: "shell",
        inline: "apt-get -y update && apt-get -y upgrade",
        run: "never"

      unless to_boolean(ENV['ACCEPTANCE'])
        v.vm.synced_folder ANSIBLE_DIR, "/ansible"
        if File.directory?(CT_SRC_DIR)
          v.vm.synced_folder CT_SRC_DIR, "/data/private/share/dev"
        end

        # Build the VM in the same was as the ansible README instructions
        # state.  These are only available when `ACCEPTANCE` has not been defined.
        v.vm.provision "install_ansible",
          type: "shell",
          run: "never",
          path: "scripts/install-ansible.sh"
        v.vm.provision "run_prep_playbook",
          type: "shell",
          run: "never",
          path: "scripts/run-prep-playbook.sh"
        v.vm.provision "run_build_playbook",
          type: "shell",
          run: "never",
          inline: <<-SH
            AWS_ACCESS_KEY_ID=#{ENV.fetch('AWS_ACCESS_KEY_ID', '')} AWS_SECRET_ACCESS_KEY=#{ENV.fetch('AWS_SECRET_ACCESS_KEY', '')} /vagrant/scripts/run-build-playbook.sh
          SH

      end
    end
  end
end

def to_boolean(v)
  case v
  when /true/i, /yes/i, "1"
    true
  else
    false
  end
end
