#!/bin/bash
#######################################################################
# (c) Copyright 2000-2011 Concurrent Thinking Ltd. 
# 
# SAFE CLUSTER INSTALLATION KIT 
# 
# Many software packages included in this system are protected under
# international copyright laws. Unauthorized copying, distribution or
# modification is prohibited and authorized distribution, copying or
# modification is subject to the copyright notice of each individual
# package.
# 
# THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTY.  IN PARTICULAR, NEITHER THE AUTHORS NOR CONCURRENT
# THINKING LTD MAKE ANY REPRESENTATION OR WARRANTY OF ANY KIND
# CONCERNING THE FITNESS OF THIS SOFTWARE FOR ANY PARTICULAR PURPOSE.
#
# This file was written by Greg Sutcliffe and Mark J. Titorenko of
# Concurrent Thinking Ltd and is protected by copyright. Unauthorized
# copying, distribution or modification is prohibited.
######################################################################
# 
# script to modify appliance grub boot parameters at deploy time
# $1 = kernel filename (relative to /boot)
# $2 = initrd filename (relative to /boot)
# $3 = bootloader to use
#
# NB. all these parameters are currently ignored by this particular
# script, but we expect them to be passed in by the SAFE persistent
# handler nonetheless.
######################################################################

# Exit codes (to pass back to SAFE)
ParameterError=1
MkinitrdError=2
ConfigError=3
BootloaderError=4

# Define an exit test function
function exit_test {
  if [[ $? != 0 ]]; then
    exit $1
  fi
}  

######################################################################
# Check number of params
# Exit if not what we expect
if [[ $# != 3 ]]; then
  exit $ParameterError
fi
######################################################################

TMPDIR=/tmp/bootloader.$$
mkdir -p $TMPDIR

######################################################################
# Update the initrd
# This need to be more general and include a version string in future
rm -f /boot/initrd.img-*
/usr/sbin/update-initramfs -k all -c 2>&1 > $TMPDIR/output
exit_test $MkinitrdError
######################################################################

######################################################################
# Ensure kernel and ramdisk symlinks are available in all the right
# places.
for a in /boot/vmlinuz-*; do latest=`basename $a`; done
suffix=`echo $latest | cut -c9-`

# Remove existing symlinks if they're older than the latest available
# kernel version
if [ -L /boot/vmlinuz ]; then
    current=`stat -c %N /boot/vmlinuz | awk '{print substr($3,index($3,"-")+1,length($3)-2);}'`
    if [ "$current" != "$suffix" ]; then
	rm -f /boot/vmlinuz
	rm -f /boot/initrd.img
    fi
fi

if [ ! -L /boot/vmlinuz ]; then
    ln -s `basename $latest` /boot/vmlinuz
    if [ ! -f /boot/initrd.img-$suffix ]; then
	echo "Unable to locate initrd.img file for $suffix."
	exit $ConfigError
    else
	rm -f /boot/initrd.img
	ln -s initrd.img-$suffix /boot/initrd.img
    fi
fi

# Create symlinks in the root filesystem in case we don't have a
# seperate /boot partition
if [ ! -L /vmlinuz ]; then
    ln -s /boot/vmlinuz /vmlinuz
fi

if [ ! -L /initrd.img ]; then
    ln -s /boot/initrd.img /initrd.img
fi
######################################################################

######################################################################
# Patch preset menu with menu, initrd and kernel checksums
MENU_CHECKSUM=`ruby /usr/local/sbin/gen_file_checksum.rb /boot/grub/menu`
KERNEL_CHECKSUM=`ruby /usr/local/sbin/gen_file_checksum.rb /boot/vmlinuz 2044`
INITRD_CHECKSUM=`ruby /usr/local/sbin/gen_file_checksum.rb /boot/initrd.img 2044`
# Read job from /etc/concurrent-thinking/appliance/release.yml
job=`cat /etc/concurrent-thinking/appliance/release.yml | grep "^job" | cut -f2- -d" "`
if [ -z "$job" -o "$job" = "NONE" ]; then
    # If job is NONE then use the MAC address of eth0
    mac=`cat $(ls -d /sys/class/net/en* | head -n 1)/address`
    LICENSEE="[$mac/00]"
else
    # LICENSEE needs to be 22 bytes long
    LICENSEE=`ruby -e 'x=ARGV[0];print x + (" " * (22 - x.length))' "[$job]"`
fi
# escape /, [ and ] chars so it can be properly sedded
LICENSEE=`ruby -e "print ARGV[0].gsub('/','\/').gsub('[','\[').gsub(']','\]')" "$LICENSEE"`
cat <<'EOF' > $TMPDIR/phoenix-menu.lst
#fxmenu (hd0,0)/grub/menu %MENU_CHECKSUM%
default saved
timeout 5
color cyan/blue white/blue
password --md5 $1$m5v52hmE$lAEDohQZ41mZ0GOAqtViz/

title START APPLIANCE %LICENSEE%
root (hd0,0)
kernel --checksum=%KERNEL_CHECKSUM% /vmlinuz root=/dev/mapper/system-rootfs ro seed=$(PASSWORD) 3                   
initrd /initrd.img %INITRD_CHECKSUM%
savedefault

title PERFORM UPGRADE
root (hd0,0)
kernel --checksum=%KERNEL_CHECKSUM% /vmlinuz root=/dev/mapper/upgrade-rootfs ro seed=$(PASSWORD) 3                    cryptopts=target=upgrade-rootfs,source=/dev/Xda3,key=none,keyscript=/lib/cryptsetup/scripts/cryptkey
initrd /initrd.img %INITRD_CHECKSUM%
savedefault

###############################RESERVED FOR FUTURE EXPANSION################################
EOF

cat <<EOF > $TMPDIR/phoenix-menu.sed
{
s/%MENU_CHECKSUM%/$MENU_CHECKSUM/g
s/%INITRD_CHECKSUM%/$INITRD_CHECKSUM/g
s/%KERNEL_CHECKSUM%/$KERNEL_CHECKSUM/g
s/%LICENSEE%/$LICENSEE/g
}
EOF

sed -i -f $TMPDIR/phoenix-menu.sed $TMPDIR/phoenix-menu.lst
exit_test $ConfigError
# Check that the phoenix-menu.lst is the right size for patching into
# the grub stage2 binary
sz=`stat -c%s $TMPDIR/phoenix-menu.lst`
if [ "$sz" != "843" ]; then
  exit $ConfigError
fi
######################################################################

######################################################################
# Generate checksum and patch preset menu into grub stage2
PRESET_CHECKSUM=`ruby /usr/local/sbin/gen_file_checksum.rb $TMPDIR/phoenix-menu.lst`
GRUB_DIR=/usr/lib/grub/i386-pc
# Check that the stage2 file is the expected version
if ! echo "66d8d3de20a8ab35b49536e8aa8ca0a8  $GRUB_DIR/stage2" | md5sum -c --status; then
  exit $ConfigError    
fi
dd if=$GRUB_DIR/stage2 of=$TMPDIR/stage2.prefix bs=1 count=157656 &>/dev/null
dd if=$GRUB_DIR/stage2 of=$TMPDIR/stage2.suffix bs=1 skip=158532 &>/dev/null
dd if=/dev/zero of=$TMPDIR/phoenix-menu.lst bs=1 seek=843 count=1 &>/dev/null
echo -n "$PRESET_CHECKSUM" | dd of=$TMPDIR/phoenix-menu.lst bs=1 seek=844 &>/dev/null
cat $TMPDIR/stage2.prefix $TMPDIR/phoenix-menu.lst $TMPDIR/stage2.suffix > $TMPDIR/stage2.complete
######################################################################

######################################################################
# Install bootloader
cp $GRUB_DIR/stage1 /boot/grub
cp $GRUB_DIR/e2fs_stage1_5 /boot/grub
mv $TMPDIR/stage2.complete /boot/grub/stage2
/usr/sbin/grub-set-default 0
/usr/sbin/grub --batch --no-floppy --device-map=/boot/grub/device.map <<EOT 2>&1 >$TMPDIR/safe.grub-output.$$
root (hd0,0)
setup (hd0)
quit
EOT
exit_test $BootloaderError
######################################################################

######################################################################
# Install disk password
DISK_PASSWORD=`ruby /usr/local/sbin/gen_disk_password.rb "PASSWORD"`
# uses fsync to force physical write of output data and metadata
# before exit (otherwise installing the disk password may not occur if
# we're deploying from within a diskless image and merely use the
# reset button after it's done).
echo -ne "$DISK_PASSWORD" | dd of=/dev/Xda seek=8 count=8 bs=1 conv=fsync &>/dev/null
exit_test $ConfigError
######################################################################

rm -rf $TMPDIR

# Done! :-)
