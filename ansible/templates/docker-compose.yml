version: "3.3"
name: concertim
services:
{% if enable_concertim %}
  visualisation:
    image: concertim-visualisation-app:{{visualisation_app_facts_docker_image_tag}}
    volumes:
      - static-content:{{static_content_mount}}
      - type: bind
        source: "{{ct_etc_dir}}"
        target: "{{ct_etc_mount}}"
    env_file:
      - secrets/secrets.env
      - secrets/jwt_secret.env
    environment:
      - METRIC_DAEMON_URL=http://metric_reporting_daemon:{{metric_reporting_daemon_api_port}}
      - POSTGRES_HOST=db
      - POSTGRES_PORT={{db_port}}
      - CREDENTIALS_CONTENT_PATH={{credentials_path}}
      - PORT={{visualisation_app_port}}
      - REDIS_URL="redis://{{redis_interface}}:{{redis_port}}/1"
      {% if access_hostnames is not defined or access_hostnames is none %}
      - ACTION_CABLE_ALLOWED_ORIGINS={{ansible_facts.hostname}}
      {% else %}
      - ACTION_CABLE_ALLOWED_ORIGINS={{access_hostnames | join(",")}}
      {% endif %}
      - RAILS_ENV=production
    depends_on:
      - db
      - proxy
      - redis
    ports:
      - "{{visualisation_app_interface}}:{{visualisation_app_port}}:{{visualisation_app_port}}"
    network_mode: host
    extra_hosts:
      - "metric_reporting_daemon:{{metric_reporting_daemon_ip}}"
      - "db:{{db_ip}}"
      - "cluster_builder:{{cluster_builder_ip}}"
      - "api_server:{{api_server_ip}}"
      - "user_handler:{{api_server_ip}}"
      - "redis:{{redis_ip}}"

  redis:
    image: redis
    ports:
      - "{{redis_interface}}:{{redis_port}}:{{redis_port}}"
    command: ["redis-server", "--port", "{{redis_port}}", "--requirepass", "{{redis_password}}"]
    network_mode: host

  metric_reporting_daemon:
    image: concertim-metric-reporting-daemon:{{metric_reporting_daemon_facts_docker_image_tag}}
    volumes:
      - rrd-data:/var/lib/metric-reporting-daemon/rrds
      - type: bind
        source: "{{ct_etc_dir}}/metric-reporting-daemon"
        target: "{{ct_etc_mount}}/metric-reporting-daemon"
    env_file:
      - secrets/secrets.env
      - secrets/jwt_secret.env
    ports:
      - "{{metric_reporting_daemon_api_interface}}:{{metric_reporting_daemon_api_port}}:{{metric_reporting_daemon_api_port}}"
    network_mode: host
    extra_hosts:
      - "visualisation:{{visualisation_app_ip}}"
    depends_on:
      - proxy

  proxy:
    image: concertim-proxy
    ports:
{%    if proxy_http_port %}
      - "{{proxy_http_interface}}:{{proxy_http_port}}:{{proxy_http_port}}"
{%    endif %}
      - "{{proxy_https_interface}}:{{proxy_https_port}}:{{proxy_https_port}}"
    volumes:
      - static-content:{{static_content_mount}}
    network_mode: host
    extra_hosts:
      - "metric_reporting_daemon:{{metric_reporting_daemon_ip}}"
      - "visualisation:{{visualisation_app_ip}}"

  db:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    command: ["postgres", "-c", "listen_addresses={{db_interface}}", "-c", "port={{db_port}}"]
    env_file:
      - secrets/secrets.env
    ports:
      - "{{db_interface}}:{{db_port}}:{{db_port}}"
    healthcheck:
      test: [ "CMD-SHELL", "PGPORT={{db_port}} pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: host
{% endif %}

{% if enable_cluster_builder %}
  cluster_builder: 
    image: concertim-cluster-builder:{{cluster_builder_facts_docker_image_tag}}
    # flask requires SIGINT to stop gracefully
    # (default stop signal from Compose is SIGTERM)
    stop_signal: SIGINT
    environment:
      - PORT={{cluster_builder_port}}
      - HOST={{cluster_builder_interface}}
    env_file:
      - secrets/jwt_secret.env
    ports:
      - "{{cluster_builder_interface}}:{{cluster_builder_port}}:{{cluster_builder_port}}"
    volumes:
      - "{{ct_cluster_builder_share_dir}}/:/app/instance"
    network_mode: host
    extra_hosts:
      - "user_handler:{{api_server_ip}}"
{% endif %}

{% if enable_openstack_service %}
  api_server:
    image: concertim-api-server:{{openstack_service_facts_docker_image_tag}}
    env_file:
      - secrets/jwt_secret.env
    ports:
      - "{{api_server_interface}}:42356:42356"
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"
    network_mode: host
    extra_hosts:
      - "proxy:{{proxy_ip}}"
      - "killbill:{{killbill_ip}}"

  billing:
    image: concertim-billing:{{openstack_service_facts_docker_image_tag}}
    env_file:
      - secrets/jwt_secret.env
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"
    network_mode: host
    extra_hosts:
      - "proxy:{{proxy_ip}}"
      - "killbill:{{killbill_ip}}"

  bulk_updates:
    image: concertim-bulk-updates:{{openstack_service_facts_docker_image_tag}}
    env_file:
      - secrets/jwt_secret.env
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"
    network_mode: host
    extra_hosts:
      - "proxy:{{proxy_ip}}"
      - "killbill:{{killbill_ip}}"

  mq_listener:
    image: concertim-mq-listener:{{openstack_service_facts_docker_image_tag}}
    env_file:
      - secrets/jwt_secret.env
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"
    network_mode: host
    extra_hosts:
      - "proxy:{{proxy_ip}}"
      - "killbill:{{killbill_ip}}"

  metrics:
    image: concertim-metrics:{{openstack_service_facts_docker_image_tag}}
    env_file:
      - secrets/jwt_secret.env
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"
    network_mode: host
    extra_hosts:
      - "proxy:{{proxy_ip}}"
{% endif %}

{% if enable_concertim %}
volumes:
  db-data:
  rrd-data:
  static-content:
{% endif %}
