---
- name: Install and build Alces Concertim components as docker containers
  hosts: all
  become: true
  become_user: root
  become_method: sudo

  vars:
    ct_action: deploy

  pre_tasks:
    - name: Assert GitHub credentials are present
      ansible.builtin.assert:
        that:
          - "gh_token is defined"
          - "gh_token != ''"
        fail_msg: "gh_token credential has not been given"
        quiet: true

    - name: Make installation directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        state: directory
      loop:
        - path: "{{ct_root_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_etc_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_installation_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_log_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_var_lib_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_docker_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_docker_dir}}/secrets"
          owner: root
          group: root
          mode: "700"

    - name: Ensure shared jwt secret exists
      ansible.builtin.set_fact:
          jwt_secret: "{{ lookup('password', '{{ct_docker_dir}}/secrets/jwt-secret chars=ascii_letters,digits length=32') }}"

    - name: Create shared jwt secret env file
      ansible.builtin.template:
          src: jwt_secret.env
          dest: "{{ct_docker_dir}}/secrets"
          owner: root
          group: root
          mode: '0600'
          lstrip_blocks: yes

  roles:
    - role: concertim_common
      tags: concertim
      when: enable_concertim | bool

    - role: db
      tags: concertim
      when: enable_concertim | bool

    - role: proxy
      tags: concertim
      when: enable_concertim | bool

    - role: metric_reporting_daemon
      tags: concertim
      when: enable_concertim | bool

    - role: visualisation_app
      tags: concertim
      when: enable_concertim | bool

    - role: cluster_builder
      tags: cluster_builder
      when: enable_cluster_builder | bool

    - role: killbill
      tags: killbill
      when: enable_killbill | bool

    - role: openstack_service
      tags: openstack_service
      when: enable_openstack_service | bool

  tasks:
    - name: Install docker compose file
      ansible.builtin.template:
        src: docker-compose.yml
        dest: "{{ct_docker_dir}}/"
        lstrip_blocks: yes

# Run any tasks that need to run after all of the containers and the docker
# compose configuration is in place.  E.g., migrating databases.
- name: Post-install configuration
  hosts: all
  become: true
  become_user: root
  become_method: sudo
  vars:
    ct_action: post-deploy
  roles:
    - role: visualisation_app
      tags: concertim
      when: enable_concertim | bool

    - role: openstack_service
      tags: openstack_service
      when: enable_openstack_service | bool

    - role: killbill
      tags: killbill
      when: enable_killbill | bool

- name: Start Alces Concertim components and infrastructure
  hosts: all
  become: true
  become_user: root
  become_method: sudo
  tasks:
    # Ensure all services are up.  If any needed restarting they will have been
    # downed in the previous plays, all that needs to happen here is ensure
    # they're up.

    - name: Start killbill
      tags: killbill
      when: enable_killbill | bool
      ansible.builtin.shell:
        chdir: "{{ct_installation_dir}}/killbill"
        cmd: |
          docker compose up --detach

    - name: Start concertim services
      tags:
        - concertim
        - cluster_builder
        - openstack_service
      when: (enable_concertim | bool) or (enable_cluster_builder | bool) or (enable_openstack_service | bool)
      ansible.builtin.shell:
        chdir: "{{ct_docker_dir}}"
        cmd: |
          docker compose up --detach
