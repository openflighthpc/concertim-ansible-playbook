- name: Make destination directory
  ansible.builtin.file:
    path: "{{ rails_root_dir }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "755"
    state: directory

- name: Install phoenix modules tarballs from s3
  vars:
    destination_dir: "{{ rails_root_dir }}"
    s3_prefix: "{{s3_modules_prefix}}"
    tarball_name: "{{item}}.tgz"
    untarred_dir: "{{item}}"
    correct_owner: "{{app_user}}"
    correct_group: "{{app_user}}"
  include_tasks: install_s3_tarball.yml
  loop: "{{ modules }}"

- name: bind rails modules into {{ phoenix_modules_bind_directory }}
  when: phoenix_modules_bind_directory is defined
  block:
    - name: Make {{ phoenix_modules_bind_directory }} directory
      ansible.builtin.file:
        path: "{{ phoenix_modules_bind_directory }}"
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
        state: directory

    - name: Mount bind directory
      ansible.posix.mount:
        path: "{{ phoenix_modules_bind_directory }}"
        src: "{{ rails_root_dir }}"
        opts: bind
        fstype: "none"
        state: mounted

- name: configure modules
  vars:
    template_dest: "{{ rails_root_dir }}/{{ module }}/config/local_environment.rb"
    template_src: "{{ template_dest }}.tagged"
    replacements:
      - regexp: "%PASSWORD_ENCRYPTION_SALT%"
        replace: "--ghtJU7hgKjh--"
      - regexp: "%DYNAMIC_IMAGES%"
        replace: "{{ phoenix_modules_dynamic_images }}"
  include_tasks: install_tagged_configuration.yml
  loop: "{{ modules }}"
  loop_control:
    loop_var: module

- name: configuring uma
  vars:
    template_dest: "{{ rails_root_dir }}/uma/db/fixtures/users.yml"
    template_src: "{{ template_dest }}.tagged"
    replacements:
      - regexp: "%INTEGRTOR_PASSWORD%"
        replace: "{{ integrator_password }}"
  include_tasks: install_tagged_configuration.yml

# XXX Move all of these to the various phoenix-module repos.
- name: Patch and fixup
  block:
    - name: Monkey patch active record
      ansible.builtin.copy:
        src: monkey_patch_active_record.rb
        dest: "{{ rails_root_dir }}/{{ item }}/config/initializers/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
      loop: "{{ modules }}"

- name: Fix and hack hacor into submission
  include_tasks: hacor_fixes_and_hacks.yml

- name: Fix and hack sas into submission
  include_tasks: sas_fixes_and_hacks.yml

- name: Create database
  ansible.builtin.shell:
    cmd: |
      PATH={{ruby_18_bin_dir}}:$PATH
      sudo -u {{ app_user }} --preserve-env=PATH /bin/bash -c 'rake db:drop_and_create RAILS_ENV={{ rails_env }} PHOENIX_START=0 --trace'
    chdir: "{{ rails_root_dir }}/{{ item }}"
  loop: "{{ modules }}"

- name: Migrate database
  ansible.builtin.shell:
    cmd: |
      PATH={{ruby_18_bin_dir}}:$PATH
      sudo -u {{ app_user }} --preserve-env=PATH /bin/bash -c 'rake db:rebuild RAILS_ENV={{ rails_env }} PHOENIX_START=0 --trace'
    chdir: "{{ rails_root_dir }}/{{ item }}"
  loop: "{{ modules }}"


- name: Install mongrel config files
  vars:
    mongrel_user: "{{app_user}}"
    mongrel_conf_dir: "/etc/mongrel_cluster"
    template_dest: "{{ mongrel_conf_dir }}/{{ module }}.yml"
    template_src: "{{ rails_root_dir }}/{{ module }}/config/mongrel_cluster.yml.tagged"
    replacements:
      - regexp: "%MONGREL_USER%"
        replace: "{{ mongrel_user }}"
      - regexp: "%MONGREL_GROUP%"
        replace: "{{ mongrel_user }}"
      - regexp: "%ENV%"
        replace: "{{ mode }}"
      - regexp: "%{{ module | upper }}_ROOT%"
        replace: "/opt/concurrent-thinking/{{ module }}"
  include_tasks: install_tagged_configuration.yml
  loop: "{{ modules }}"
  loop_control:
    loop_var: module

- name: Install various appliance scripts
  include_tasks: install_scripts.yml

# - name: Install cron jobs
# - name: Install logrotation
# - name: Add www-data to adm group
