- name: Install required packages
  ansible.builtin.apt:
    name: awscli

- name: Build packages
  ansible.builtin.command:
    cmd: "{{role_path}}/files/scripts/build-packages.sh {{release_tag}}"
  environment:
    APPLIANCES: "{{ build_packages_appliances | join(' ') }}"
    DAEMONS: "{{ build_packages_daemons | join(' ') }}"
    MODULES: "{{ build_packages_modules | join(' ') }}"
    GH_TOKEN: "{{gh_token}}"
    BUILD_DIR:   /tmp/{{role_name}}/build
    PACKAGE_DIR: /tmp/{{role_name}}/packages
  register: build_packages

- name: "Build packages stderr"
  ansible.builtin.debug:
    var: build_packages.stderr_lines
  failed_when: build_packages.rc != 0
  ignore_errors: True
  when: build_packages.rc != 0

- name: "Build packages stdout"
  ansible.builtin.debug:
    var: build_packages.stdout_lines
  failed_when: build_packages.rc != 0

- name: Upload packages
  ansible.builtin.command:
    cmd: "{{role_path}}/files/scripts/upload-packages.sh --yes"
  environment:
    PACKAGE_DIR: /tmp/{{role_name}}/packages
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  register: upload_packages

- name: "Upload packages stderr"
  ansible.builtin.debug:
    var: upload_packages.stderr_lines
  failed_when: upload_packages.rc != 0
  ignore_errors: True
  when: upload_packages.rc != 0

- name: "Upload packages stdout"
  ansible.builtin.debug:
    var: upload_packages.stdout_lines
  failed_when: upload_packages.rc != 0
