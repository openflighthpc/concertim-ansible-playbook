- name: Make destination directory
  ansible.builtin.file:
    path: "{{ rails_root_dir }}"
    owner: "{{app_user}}"
    group: "{{app_user}}"
    mode: "755"
    state: directory

- name: Install mia tarball from s3
  vars:
    destination_dir: "{{ rails_root_dir }}"
    s3_prefix: "{{s3_appliances_prefix}}"
    tarball_name: mia.tgz
    untarred_dir: mia
    correct_owner: "{{app_user}}"
    correct_group: "{{app_user}}"
  include_tasks: install_s3_tarball.yml

- name: Create control stream spool directory
  ansible.builtin.file:
    path: /var/spool/control_stream
    owner: "{{app_user}}"
    group: root
    mode: "755"
    state: directory

- name: Install javascript optimization support libraries
  ansible.builtin.unarchive:
    src: "optimization-js.tgz"
    dest: /opt
    creates: /opt/js

- name: Install local_environment.rb
  ansible.builtin.copy:
    remote_src: yes
    src:  "{{ rails_root_dir }}/mia/config/local_environment.rb.tagged"
    dest: "{{ rails_root_dir }}/mia/config/local_environment.rb"

- name: Cache classes in development
  ansible.builtin.replace:
    path: "{{ rails_root_dir }}/mia/config/environments/development.rb"
    regexp: "config.cache_classes = false"
    replace: "config.cache_classes = true"

- name: Install mongrel config files
  vars:
    mongrel_conf_dir: "/etc/mongrel_cluster"
    template_dest: "{{ mongrel_conf_dir }}/mia.yml"
    template_src: "{{ rails_root_dir }}/mia/config/mongrel_cluster.yml.tagged"
    replacements:
      - regexp: "%MONGREL_USER%"
        replace: "{{ app_user }}"
      - regexp: "%MONGREL_GROUP%"
        replace: "{{ app_user }}"
      - regexp: "%ENV%"
        replace: "{{ rails_env }}"
      - regexp: "%MIA_ROOT%"
        replace: "/opt/concurrent-thinking/mia"
      - regexp: "%SERVER_COUNT%"
        replace: "{{ mia_server_count }}"
  include_tasks: "{{ role_path }}/../phoenix-modules/tasks/install_tagged_configuration.yml"

- name: Make appliance directory
  ansible.builtin.file:
    path: "{{ct_etc_dir}}/appliance"
    owner: "{{app_user}}"
    group: root
    mode: "755"
    state: directory

- name: Touch unconfigured file
  ansible.builtin.copy:
    dest: "{{ct_etc_dir}}/appliance/unconfigured"
    content: ""
    owner: "{{app_user}}"

- name: Build MIA JS
  ansible.builtin.command:
    cmd: "{{ rails_root_dir }}/mia/public/scripts/src/meta/build.sh"

- name: Make image directories
  ansible.builtin.file:
    path: "{{ rails_root_dir }}/mia/public/images/{{item}}/"
    owner: "{{app_user}}"
    group: "{{app_user}}"
    mode: "755"
    state: directory
  loop:
    - irv
    - data_centre

- name: Configure default IRV images
  vars:
    rails_root: "{{ rails_root_dir }}"
  ansible.builtin.file:
    src: "{{ rails_root }}/hacor/app/models/chassis_templates/images"
    dest: "{{ rails_root }}/mia/public/images/irv/concurrent-thinking"
    state: link

# - name: Install logrotation
# - name: Install create_selenium_chassis_template_list.rb
