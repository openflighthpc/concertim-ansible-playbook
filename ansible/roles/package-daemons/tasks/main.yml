- name: Download daemon packages from S3
  amazon.aws.aws_s3:
    bucket: alces-flight
    object: /concertim/packages/daemons/{{ item }}.tgz
    dest: "{{ role_path }}/files/tmp/{{ item }}.tgz"
    mode: get
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  loop: "{{ packaged_daemons }}"

- name: Make destination directory
  ansible.builtin.file:
    path: "{{ daemon_installation_dir }}"
    owner: root
    group: root
    mode: "755"
    state: directory

- name: Extract tar files
  ansible.builtin.unarchive:
    src: "tmp/{{ item }}.tgz"
    dest: "{{ daemon_installation_dir }}"
    creates: "{{ daemon_installation_dir }}/{{ item }}"
  loop: "{{ packaged_daemons }}"

- name: Install number crunchers
  block:
    - name: Download number cruncher from S3
      amazon.aws.aws_s3:
        bucket: alces-flight
        object: /concertim/packages/daemons/{{ item }}-number-cruncher.deb
        dest: "{{ role_path }}/files/tmp/{{ item }}-number-cruncher.deb"
        mode: get
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
      loop: "{{ number_crunchers }}"

    - name: Install number cruncher deb package
      ansible.builtin.apt:
        deb: "{{ role_path }}/files/tmp/{{ item }}-number-cruncher.deb"
      loop: "{{ number_crunchers }}"


# - name: Updating bunder to use {{ gem_source_url }}

- name: Install gem dependencies
  vars:
    daemon_path: "{{ daemon_installation_dir}}/{{ item }}"
  ansible.builtin.shell: |
    cd "{{ daemon_path }}"
    PATH=/opt/ruby-1.9/bin:$PATH
    /opt/ruby-1.9/bin/bundle install --local
  loop: "{{ packaged_daemons }}"

- name: Install init.d files
  ansible.builtin.copy:
    src: "{{ item }}.init"
    dest: /etc/init.d/{{ item }}
    owner: root
    group: root
    mode: "744"
  loop: "{{ packaged_daemons + init_only_daemons }}"
  # XXX deal with UID check.

# - name: Additional demm configuration
#   vars:
#     limits_dir: /data/private/share/etc/concurrent-thinking/appliance/limits
#     demm_path: "{{ daemon_installation_dir }}/demm"
#   block:
#     - name: Make limits directory
#       ansible.builtin.file:
#         path: "{{ limits_dir }}"
#         state: directory
#         owner: www-data
#         group: root
#         mode: "755"

#     - name: Copy demm limits
#       ansible.builtin.copy:
#         src: "{{ demm_path }}/config/demm.yml.limits"
#         remote_src: true
#         dest: "{{ limits_dir }}/demm.yml"
#         owner: www-data
#         group: root
#         mode: "644"

- name: Additional martha configuration
  block:
    - name: Make rrds directory
      ansible.builtin.file:
        path: "{{ daemon_installation_dir }}/martha/rrds"
        state: directory
        owner: root
        group: root
        mode: "755"

    - name: Install martha number cruncher
      ansible.builtin.command:
        cmd: dpkg -i --force-architecture --force-overwrite {{ role_path }}/files/martha-number-cruncher.deb

- name: Additional theresa configuration
  block:
    - name: Install theresa number cruncher
      ansible.builtin.command:
        cmd: dpkg -i --force-architecture --force-overwrite {{ role_path }}/files/theresa-number-cruncher.deb

- name: Additional maggie configuration
  block:
    - name: Install maggie number cruncher
      ansible.builtin.command:
        cmd: dpkg -i --force-architecture --force-overwrite {{ role_path }}/files/maggie-number-cruncher.deb

- name: Additional ct-capacity-daemon configuration
  block:
    - name: Install ct-capacity-daemon number cruncher
      ansible.builtin.command:
        cmd: dpkg -i --force-architecture --force-overwrite {{ role_path }}/files/ct-capacity-daemon-number-cruncher.deb

# - name: Install clobber script
# - name: Install hw.sh script

- name: Ensure that daemons are enabled
  ansible.builtin.service:
    name: "{{ item }}"
    # state: started
    enabled: yes
  loop: "{{ packaged_daemons + init_only_daemons }}"
