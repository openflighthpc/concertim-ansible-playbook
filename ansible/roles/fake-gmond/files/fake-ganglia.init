#!/bin/sh
### BEGIN INIT INFO
# Provides:          fake-ganglia
# Required-Start:    $all
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/Stop the fake Ganglia daemon
# Description:       as above
### END INIT INFO
PATH=/opt/ruby-1.8/bin/:/sbin:/bin:/usr/sbin:/usr/bin
NAME=fake-ganglia
DESC="the fake Ganglia daemon"
SCRIPT=/tmp/start-fake.sh
LOG=/tmp/start-fake.log

#[ -x "$DAEMON" ] || exit 0

. /lib/lsb/init-functions

# Start the fake ganglie engine
start()
{
	cat - <<EOF >$SCRIPT
PATH=/opt/ruby-1.8/bin/:/sbin:/bin:/usr/sbin:/usr/bin

# XXX We should wait until the various daemons are running.  Previously, this
# was done by interrogating monit.

echo >/dev/console
echo "Starting fake ganglia engine" >/dev/console
echo >/dev/console
echo "\`date\`: Start fake ganglia engine"
cd /root/ganglia_data_generator
AUTOSTART/get_status &

. ./start_fake_gmond
EOF

	# Now run this in the background for later startup
	chmod +x $SCRIPT
	nohup $SCRIPT >$LOG 2>&1 &
}
# END of routine start


# Stop all fake ganglia processes
stop()
{
	killall run_demo fake-gmond.rb dumpdata.sh
}


# Check we have what we need
if [ ! -d /root/ganglia_data_generator ] ; then
	echo "Ganglia data generator not installed"
	log_end_msg 1
	exit 99
fi

case "$1" in
	start)
		log_daemon_msg "Queuing $DESC" start_fake_gmond
		start
		log_end_msg 0
	;;
	stop)
		stop
	;;
	restart|force-reload)
		stop
		sleep 2
		start
	;;
	status)
		status_of_proc merge_ganglia merge_ganglia
		status_of_proc fake-gmond.rb fake-gmond.rb
		status_of_proc dumpdata.sh dumpdata.sh

	;;
	*)
		echo "Usage: fake-ganglia {start|stop|restart|force-reload|status}" >&2
		exit 3
	;;
esac


