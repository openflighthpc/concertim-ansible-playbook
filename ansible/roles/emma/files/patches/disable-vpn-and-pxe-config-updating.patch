diff -x tmp -x log -ur -u emma.orig/ivy/app/models/ivy/cluster.rb emma/ivy/app/models/ivy/cluster.rb
--- emma.orig/ivy/app/models/ivy/cluster.rb	2019-09-13 13:01:43.000000000 +0000
+++ emma/ivy/app/models/ivy/cluster.rb	2022-09-23 12:33:04.405824881 +0000
@@ -24,7 +24,7 @@
     # HOOKS
     before_validation :normalize_ip_fields, :normalize_networks, :strip_attributes
     #after_save :short_deferred_update_dns, 
-    after_save :deferred_update_net_configuration, :update_network_configurations
+    after_save :deferred_update_net_configuration #, :update_network_configurations
 
 
     #
@@ -289,19 +289,19 @@
     # update vpn config if management_network was changed.
     #
     def update_network_configurations(opts = {})
-      update_nfs_configuration
-      update_vpn_configuration if management_network_changed? || opts[:management_network_changed]
+      #update_nfs_configuration
+      #update_vpn_configuration if management_network_changed? || opts[:management_network_changed]
     end
 
 
-    def update_pxe_configuration(opts = {})
-      #MMM need to add some defense in here - this method will fall over if appliance-ip_addr is not supplied (because
-      #the gsub! below tries to sub in 'nil')
-      appliance_ip_addr = opts[:appliance_ip_addr]
-      data=File.read("/var/lib/tftpboot/pxelinux.cfg/default.template").split("\n")
-      data.each {|l| l.gsub!(/%APPLIANCEIP%/,appliance_ip_addr)}
-      File.open('/var/lib/tftpboot/pxelinux.cfg/default','w') {|f| f.puts data.join("\n")}
-    end
+    #def update_pxe_configuration(opts = {})
+    #  #MMM need to add some defense in here - this method will fall over if appliance-ip_addr is not supplied (because
+    #  #the gsub! below tries to sub in 'nil')
+    #  appliance_ip_addr = opts[:appliance_ip_addr]
+    #  data=File.read("/var/lib/tftpboot/pxelinux.cfg/default.template").split("\n")
+    #  data.each {|l| l.gsub!(/%APPLIANCEIP%/,appliance_ip_addr)}
+    #  File.open('/var/lib/tftpboot/pxelinux.cfg/default','w') {|f| f.puts data.join("\n")}
+    #end
 
     def update_command(opts = nil)
       Phoenix::Deferrals::deferred('update_command', 30) do
@@ -353,19 +353,19 @@
     # Writes data for cluster into /etc/exports and messages sadeeclient 
     # to refresh. It then runs exportfs.
     #
-    def update_nfs_configuration
-      Rails.logger.info "Updating NFS config"
-      data=File.read("#{NFS_CONFIG_FILE}.template").split("\n")
-      data.each {|l| l.gsub!(/%BASENETWORK%/,"#{management_network_network}")}
-      data.each {|l| l.gsub!(/%NETMASK%/,"#{management_network_netmask}")}
-      data.each {|l| l.gsub!(/%VPNNETWORK%/,"#{vpn_network_network}")}
-      data.each {|l| l.gsub!(/%VPNNETMASK%/,"#{vpn_network_netmask}")}
-      data.each {|l| l.gsub!(/%PUBLICCOMMENT%/,"")}
-      data.each {|l| l.gsub!(/%PUBLICNETWORK%/,"#{public_network_network}")}
-      data.each {|l| l.gsub!(/%PUBLICNETMASK%/,"#{public_network_netmask}")}
-      File.open(NFS_CONFIG_FILE,'w') {|f| f.puts data.join("\n")}
-      system('sudo exportfs -ra')
-    end
+    #def update_nfs_configuration
+    #  Rails.logger.info "Updating NFS config"
+    #  data=File.read("#{NFS_CONFIG_FILE}.template").split("\n")
+    #  data.each {|l| l.gsub!(/%BASENETWORK%/,"#{management_network_network}")}
+    #  data.each {|l| l.gsub!(/%NETMASK%/,"#{management_network_netmask}")}
+    #  data.each {|l| l.gsub!(/%VPNNETWORK%/,"#{vpn_network_network}")}
+    #  data.each {|l| l.gsub!(/%VPNNETMASK%/,"#{vpn_network_netmask}")}
+    #  data.each {|l| l.gsub!(/%PUBLICCOMMENT%/,"")}
+    #  data.each {|l| l.gsub!(/%PUBLICNETWORK%/,"#{public_network_network}")}
+    #  data.each {|l| l.gsub!(/%PUBLICNETMASK%/,"#{public_network_netmask}")}
+    #  File.open(NFS_CONFIG_FILE,'w') {|f| f.puts data.join("\n")}
+    #  system('sudo exportfs -ra')
+    #end
 
     #
     # update_vpn_configuration
@@ -373,14 +373,14 @@
     # Writes data for cluster into /etc/openvpn/server-vpn.conf and messages
     # sadeeclient to refresh.
     #
-    def update_vpn_configuration
-      Rails.logger.info "Updating VPN config"
-      data=File.read("#{VPN_CONFIG_FILE}.template").split("\n")
-      data.each {|l| l.gsub!(/%VPNNETWORK%/,"#{vpn_network_network}")}
-      data.each {|l| l.gsub!(/%VPNNETMASK%/,"#{vpn_network_wildcard_mask}")}
-      File.open(VPN_CONFIG_FILE,'w') {|f| f.puts data.join("\n")}
-      Phoenix::Beanstalk::SadeeClient.instance.submit('openvpn_config_refresh')
-    end
+    #def update_vpn_configuration
+    #  Rails.logger.info "Updating VPN config"
+    #  data=File.read("#{VPN_CONFIG_FILE}.template").split("\n")
+    #  data.each {|l| l.gsub!(/%VPNNETWORK%/,"#{vpn_network_network}")}
+    #  data.each {|l| l.gsub!(/%VPNNETMASK%/,"#{vpn_network_wildcard_mask}")}
+    #  File.open(VPN_CONFIG_FILE,'w') {|f| f.puts data.join("\n")}
+    #  Phoenix::Beanstalk::SadeeClient.instance.submit('openvpn_config_refresh')
+    #end
 
 
     def appliance_ip
