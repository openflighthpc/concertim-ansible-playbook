diff -ur number-crunchers.orig/common/log.h number-crunchers/common/log.h
--- number-crunchers.orig/common/log.h	2022-09-29 15:54:27.506737482 +0000
+++ number-crunchers/common/log.h	2022-10-05 17:36:28.180340341 +0000
@@ -203,7 +203,9 @@
 
 inline void free_logging(FILE* log_fd)
 {
-    fclose(log_fd);
+	if (log_fd) {
+	    fclose(log_fd);
+	}
 }
 
 #endif //__LOG_H__
diff -ur number-crunchers.orig/common/utils.cpp number-crunchers/common/utils.cpp
--- number-crunchers.orig/common/utils.cpp	2022-09-29 15:54:27.502737398 +0000
+++ number-crunchers/common/utils.cpp	2022-10-05 17:24:17.684201231 +0000
@@ -34,6 +34,13 @@
     return millisecs;
 }
 
+void alces_rb_debug(VALUE v) {
+    ID sym_puts = rb_intern("puts");
+    ID sym_inspect = rb_intern("inspect");
+    rb_funcall(rb_mKernel, sym_puts, 1,
+        rb_funcall(v, sym_inspect, 0));
+}
+
 void print_backtrace(VALUE output)
 {
     void *trace_elems[10];
@@ -155,7 +162,10 @@
 
 static int keys_i(VALUE key, VALUE val, VALUE ary)
 {
+    if (key == Qundef) return ST_CONTINUE;
     rb_ary_push(ary, key);
+    return ST_CONTINUE;
+
 }
 
 // find all keys in a hash
@@ -221,6 +231,7 @@
     return hash;
 }
 
+// XXX Can probably replace with rb_hash_size?
 unsigned int hash_size(VALUE hash)
 {
     if (hash == Qnil) return 0;
diff -ur number-crunchers.orig/common/utils.h number-crunchers/common/utils.h
--- number-crunchers.orig/common/utils.h	2022-09-29 15:54:27.506737482 +0000
+++ number-crunchers/common/utils.h	2022-10-05 17:24:41.192601873 +0000
@@ -6,6 +6,7 @@
 extern unsigned int time_diff(timespec start, timespec end);
 extern timespec time_now();
 
+extern void alces_rb_debug(VALUE v);
 extern void print_backtrace(VALUE output);
 
 extern const char* inspect(VALUE val);
diff -ur number-crunchers.orig/meryl/main.cpp number-crunchers/meryl/main.cpp
--- number-crunchers.orig/meryl/main.cpp	2022-09-29 15:54:28.306754228 +0000
+++ number-crunchers/meryl/main.cpp	2022-10-05 17:30:50.825027410 +0000
@@ -25,6 +25,7 @@
 {
     FILE *fd = init_logging(logINFO, meryl_output);
     // FILE *fd = init_logging(logDEBUG);
+    // FILE *fd = init_logging(logDEBUG, "meryl.log");
 
     VALUE simple_flag = rb_hash_aref(options, rb_str_new2("simple"));
     if (simple_flag != Qnil) simple = (NUM2UINT(simple_flag) == 1);
@@ -56,10 +57,12 @@
     unsigned int workers = 0;
     try {
         workers = write_metrics_parallel(eui, (const char*)RSTRING_PTR(xml), RSTRING_LEN(xml), unique_list, options, gc, &dsm);
+	FILE_LOG(logDEBUG) << "done write_metrics_parallel";
     }
     catch (...) {
         FILE_LOG(logWARNING) << "Meryl number cruncher: encountered issue in writing metrics";
         print_backtrace(meryl_output);
+	// alces_rb_debug(meryl_output);
         memcache_free();
         return Qnil;
     }
@@ -67,10 +70,12 @@
     // free all the memory from this processing round
     try {
         free_dsm(&dsm);
+	FILE_LOG(logDEBUG) << "done free_dsm";
     }
     catch (...) {
         FILE_LOG(logWARNING) << "Meryl number cruncher: encountered issue in cleaning up";
         print_backtrace(meryl_output);
+	// alces_rb_debug(meryl_output);
         memcache_free();
         return Qnil;
     }
diff -ur number-crunchers.orig/meryl/parallel.cpp number-crunchers/meryl/parallel.cpp
--- number-crunchers.orig/meryl/parallel.cpp	2022-09-29 15:54:28.306754228 +0000
+++ number-crunchers/meryl/parallel.cpp	2022-10-05 17:35:38.696728469 +0000
@@ -60,7 +60,7 @@
 }
 
 // each child processes metrics and sends info back to parent
-bool process_children(
+void process_children(
     VALUE dev_to_rocs,
     xmlDocPtr doc,
     int num_procs, 
@@ -120,14 +120,15 @@
             if (!simple) close ((*child_fd)[child_idx][1]);
         }
         // any issue - let parent know
-        catch (...) {
+        catch (const std::exception &e) {
+            FILE_LOG(logWARNING) << "process_children: encountered issue; exiting" << e.what();
             if (!simple) free_logging(fd);
             rb_gc_unregister_address(&gc);
             exit(1);
         }
 
         if (!simple) free_logging(fd);
-        rb_gc_unregister_address(&gc);
+	rb_gc_unregister_address(&gc);
     }
 }
 
@@ -399,23 +400,29 @@
         success = create_children(num_procs,
             child_fd, child_pid,
             &child, &child_idx);
+	FILE_LOG(logDEBUG) << "done creating children";
     }
 
     // process children
     if (success) {
         process_children(dev_to_rocs, doc, num_procs, dsm, 
             child_fd, child_pid, child, child_idx, clear_cache);
+	FILE_LOG(logDEBUG) << "done processing children";
     }
 
     // children exit here
     if (child) exit(0);
 
-    if (doc != NULL) xmlFreeDoc(doc);
+    if (doc != NULL) {
+	    xmlFreeDoc(doc);
+	    FILE_LOG(logDEBUG) << "done freeing xml doc";
+    }
 
     // parent processes results
     if (success) {
         success = process_parent(num_procs, &parent_stats, &devicesSet,
             child_fd, child_pid, child, gc);
+	FILE_LOG(logDEBUG) << "done processing parent";
     }
     if (child_fd != NULL) delete[] child_fd;
 
@@ -423,11 +430,13 @@
     unsigned long hosts_stale_count = 0;
     if (success) {
         hosts_stale_count = process_stale_hosts(&devicesSet, &parent_stats);
+	FILE_LOG(logDEBUG) << "done processing stale_hosts";
     }
 
     // aggregate the partial unique metrics, together with martha's
     if (success && !aggregate) {
         write_unique_metrics(num_procs, unique_list);
+	FILE_LOG(logDEBUG) << "done writing unique metrics";
     }
 
     // summarise results
diff -ur number-crunchers.orig/meryl/write_metrics.cpp number-crunchers/meryl/write_metrics.cpp
--- number-crunchers.orig/meryl/write_metrics.cpp	2022-09-29 15:54:28.302754144 +0000
+++ number-crunchers/meryl/write_metrics.cpp	2022-10-03 21:38:30.309562727 +0000
@@ -163,7 +163,7 @@
                     double val = ValToDbl(rb_hash_aref(metric_val, value_sym));
                     double val_prev = ValToDbl(rb_hash_aref(metric_val_prev, value_sym));
                     double roc = (val - val_prev) / (ts - ts_prev);
-                    string rocStr = static_cast<ostringstream*>( &(ostringstream() << roc) )->str();
+                    string rocStr = static_cast<ostringstream>( (ostringstream() << roc) ).str();
                     VALUE rocStr_rb = rb_str_new2(rocStr.c_str());
                     rb_hash_aset(metric_val, roc_value_sym, rocStr_rb);
                     updated_roc = true;
