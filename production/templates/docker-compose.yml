version: "3.3"
name: concertim
services:
  {% if enable_concertim -%}
  visualisation:
    image: concertim-visualisation-app
    volumes:
      - static-content:{{static_content_mount}}
      - type: bind
        source: "{{ct_etc_dir}}"
        target: "{{ct_etc_mount}}"
    env_file:
      - secrets/secrets.env
    environment:
      - METRIC_DAEMON_URL=http://metric_reporting_daemon:3000
      - POSTGRES_HOST=db
      - CREDENTIALS_CONTENT_PATH={{credentials_path}}
      - PORT={{visualisation_app_host_port}}
    expose:
      - {{visualisation_app_host_port}}
    depends_on:
      - db
    networks:
      concertim-net: {}

  metric_reporting_daemon:
    image: concertim-metric-reporting-daemon
    volumes:
      - rrd-data:/var/lib/ganglia/rrds
      - type: bind
        source: "{{ct_etc_dir}}/metric-reporting-daemon"
        target: "{{ct_etc_mount}}/metric-reporting-daemon"
    env_file:
      - secrets/secrets.env
    expose:
      - {{metric_reporting_daemon_api_host_port}}
    networks:
      concertim-net: {}

  proxy:
    image: concertim-proxy
    ports:
      {% if proxy_host_http_port -%}
      - "{{proxy_host_http_interface}}:{{proxy_host_http_port}}:{{proxy_host_http_port}}"
      {% endif -%}
      - "{{proxy_host_https_interface}}:{{proxy_host_https_port}}:{{proxy_host_https_port}}"
    volumes:
      - static-content:{{static_content_mount}}
    depends_on:
      - visualisation
      - metric_reporting_daemon
    networks:
      concertim-net: {}

  db:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    env_file:
      - secrets/secrets.env
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      concertim-net: {}
  {% endif %}

  {% if enable_cluster_builder -%}
  cluster_builder: 
    image: concertim-cluster-builder
    # flask requires SIGINT to stop gracefully
    # (default stop signal from Compose is SIGTERM)
    stop_signal: SIGINT
    environment:
      - PORT={{cluster_builder_host_port}}
      - HOST={{cluster_builder_host_interface}}
    expose:
      - {{cluster_builder_host_port}}
    ports:
      - "{{cluster_builder_host_interface}}:{{cluster_builder_host_port}}:{{cluster_builder_host_port}}"
    volumes:
      - "{{ct_cluster_builder_share_dir}}/:/app/instance"
    networks:
      concertim-net: {}
  {% endif %}

  {% if enable_openstack_service -%}
  api_server:
    image: concertim-api-server
    expose:
      - 42356
    ports:
      - "{{api_server_host_interface}}:{{api_server_host_port}}:42356"
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"

  bulk_updates:
    image: concertim-bulk-updates
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"

  mq_listener:
    image: concertim-mq-listener
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"

  metrics:
    image: concertim-metrics
    volumes:
      - "{{ct_etc_dir}}/openstack-service/config.yaml:/etc/concertim-openstack-service/config.yaml"
      - "{{ct_log_dir}}/openstack-service/:/app/var/log/"
      - "{{ct_openstack_service_data_dir}}:/app/var/data/"
  {% endif %}

{% if enable_concertim -%}
volumes:
  db-data:
  rrd-data:
  static-content:
{% endif %}

networks:
  concertim-net:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1400
