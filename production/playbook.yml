---
- name: Install Alces Concertim components as docker containers
  hosts: all
  become: true
  become_user: root
  become_method: sudo

  pre_tasks:
    - name: Assert credentials are present
      ansible.builtin.assert:
        that:
          - "{{ item }} is defined"
          - "{{ item }} != ''"
        fail_msg: "{{ item }} credential has not been given"
        quiet: true
      loop:
        - gh_token

    - name: Make installation directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        state: directory
      loop:
        - path: "{{ct_root_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_etc_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_installation_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_docker_dir}}"
          owner: root
          group: root
          mode: "755"
        - path: "{{ct_docker_dir}}/secrets"
          owner: root
          group: root
          mode: "700"

  tasks:
    - name: Checkout source directories
      ansible.builtin.git:
        repo: https://{{gh_token}}@github.com/alces-flight/{{item.repo}}.git
        dest: "{{ct_installation_dir}}/{{item.dest}}"
        single_branch: yes
        version: "{{item.commitish}}"
      environment:
        GIT_TERMINAL_PROMPT: 0
      loop:
        - repo: concertim-metric-reporting-daemon
          dest: metric-reporting-daemon
          commitish: exp/dockerfile
        - repo: concertim-ct-visualisation-app
          dest: visualisation-app
          commitish: chore/dockerfile

    # We need the following as the directory is owned by root, but not all git
    # commands are executed as root.
    # XXX Can we remove this somehow?
    - name: Workaround git and dubious ownership issues
      ansible.builtin.command:
        cmd: git config --global --add safe.directory "{{ct_installation_dir}}/{{item}}"
      loop:
        - metric-reporting-daemon
        - visualisation-app

    - name: Install docker compose file
      ansible.builtin.template:
        src: docker-compose.yml
        dest: "{{ct_docker_dir}}/"

    - name: Copy additional docker compose configuration
      ansible.builtin.copy:
        src: db
        dest: "{{ct_docker_dir}}"

    - name: Ensure docker secrets exist
      ansible.builtin.set_fact:
        db_password: "{{ lookup('password', '{{ct_docker_dir}}/secrets/db-password chars=ascii_letters,digits length=32') }}"
        jwt_secret: "{{ lookup('password', '{{ct_docker_dir}}/secrets/jwt-secret chars=ascii_letters,digits length=32') }}"
        rails_master_key: "{{ lookup('password', '{{ct_docker_dir}}/secrets/rails-master-key chars=ascii_letters,digits length=32') }}"

    - name: Create secrets env file
      ansible.builtin.template:
        src: secrets.env
        dest: "{{ct_docker_dir}}/secrets"
        owner: root
        group: root
        mode: '0600'

    - name: Create (copy) configuration
      ansible.builtin.shell:
        cmd: |
          echo "Copy configuration files to ct etc dir volume.  So they can be edited."
          echo "Setup directories for cluster builder's definitions"
          echo "Any more???"

    - name: Make proxy installation directories
      ansible.builtin.file:
        path: "{{ct_installation_dir}}/proxy/nginx/conf.d"
        owner: root
        group: root
        mode: "755"
        state: directory

    - name: Install nginx reverse proxy configuration
      ansible.builtin.template:
        src: nginx/default.conf
        dest: "{{ct_installation_dir}}/proxy/nginx/conf.d/default.conf"

    - name: Install nginx reverse proxy configuration
      ansible.builtin.copy:
        src: nginx
        dest: "{{ct_installation_dir}}/proxy/"

    - name: Install nginx reverse proxy Dockerfile
      ansible.builtin.template:
        src: nginx/Dockerfile
        dest: "{{ct_installation_dir}}/proxy/"

    - name: Build docker images
      community.docker.docker_image:
        name: "{{item.name}}"
        build:
          path: "{{ct_installation_dir}}/{{item.dir}}"
          args: "{{item.args}}"
          network: host
          # http_timeout: 60
        source: build
      loop:
        - name: concertim-metric-reporting-daemon
          dir: metric-reporting-daemon
          args: {}
        - name: concertim-visualisation-app
          dir: visualisation-app
          args:
            temp_jwt_secret: not_used_just_has_to_present
        - name: concertim-proxy
          dir: proxy
          args: {}

    - name: Create visualisation credentials
      vars:
        # Make sure to escape any single quote chars here.
        script: |
          set -e
          set -o pipefail
          EDITOR=cat ./bin/rails credentials:edit
          cp -a config/credentials.yml.enc {{credentials_path}}
          ./bin/rake encryption:generate --trace
          mv config/credentials.yml.enc {{credentials_path}}
      ansible.builtin.shell:
        chdir: "{{ct_docker_dir}}"
        cmd: |
          docker compose run --rm visualisation /bin/bash -c '{{script}}'

    - name: Precompile visualisation assets
      ansible.builtin.shell:
        chdir: "{{ct_docker_dir}}"
        cmd: |
          docker compose run --rm visualisation bin/rails assets:precompile --trace

    - name: Create and migrate visualisation app database
      ansible.builtin.shell:
        chdir: "{{ct_docker_dir}}"
        cmd: |
          docker compose up --detach db
          docker compose run --rm visualisation bin/rails db:create --trace
          docker compose run --rm visualisation bin/rails db:migrate --trace
          docker compose stop

    - name: Start services
      ansible.builtin.shell:
        chdir: "{{ct_docker_dir}}"
        cmd: |
          docker compose up --detach
