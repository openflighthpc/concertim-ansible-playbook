- name: Install build dependencies
  register: result
  until: result is success
  ansible.builtin.apt:
    name:
      - ruby3.0-dev
      - autoconf
      - bison
      - build-essential
      - libpq-dev
      - libyaml-dev
      - redis-server

- name: Check for dev installation
  ansible.builtin.command:
    cmd: ls -d {{dev_root_dir}}/ct-visualisation-app
  register: dev_ct_vis_dir
  failed_when: False

- name: Bundle install gems for dev ct-visualisation-app
  ansible.builtin.shell: |
    cd {{dev_root_dir}}/ct-visualisation-app/
    ./bin/bundle install
  when: dev_ct_vis_dir.stdout != ""

- name: Install yarn dependencies
  ansible.builtin.shell: |
    cd {{dev_root_dir}}/ct-visualisation-app/
    yarn

- name: Workaround git and vboxfs issue
  ansible.builtin.command:
    cmd: git config --global --add safe.directory /opt/concertim/dev/ct-visualisation-app

- name: Install licence-limits.yml
  ansible.builtin.template:
    src:  licence-limits.yml
    dest: "{{ct_etc_dir}}"
    owner: root
    group: "{{app_user}}"
    mode: "644"

- name: Ensure credentials exist
  vars:
    credentials_path: "{{dev_root_dir}}/ct-visualisation-app/config/credentials.yml.enc"
  block:
    - name: Check for existing credentials
      ansible.builtin.stat:
        path: "{{credentials_path}}"
      register: credentials_file

    - name: Create credentials
      when: not credentials_file.stat.exists
      ansible.builtin.shell:
        chdir: "{{dev_root_dir}}/ct-visualisation-app/"
        cmd: |
          EDITOR=cat ./bin/rails credentials:edit

    - name: Generate encryption keys
      ansible.builtin.shell:
        chdir: "{{dev_root_dir}}/ct-visualisation-app/"
        cmd: |
          ./bin/rake encryption:generate

- name: Configure database user
  block:
    - name: Check if {{ app_user }} role exists
      ansible.builtin.command:
        cmd: sudo -u postgres psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ app_user }}'"
      register: db_user_exist

    - name: Create {{ app_user }} role
      when: db_user_exist.stdout == ""
      ansible.builtin.command:
        cmd: sudo -u postgres createuser {{ app_user }} -S -R -d

- name: Create database
  vars:
    task: db:create
  ansible.builtin.shell:
    cmd: |
      sudo -u root /bin/bash -c 'RAILS_ENV=development ./bin/rails {{task}} --trace'
    chdir: "{{dev_root_dir}}/ct-visualisation-app/"

- name: Migrate database
  vars:
    task: db:migrate
  ansible.builtin.shell:
    cmd: |
      sudo -u root /bin/bash -c 'RAILS_ENV=development ./bin/rails {{task}} --trace'
    chdir: "{{dev_root_dir}}/ct-visualisation-app/"

- name: Start dev server
  ansible.builtin.command:
    cmd: screen -dmS ct-vis-app ./bin/dev
    chdir: "{{dev_root_dir}}/ct-visualisation-app/"

- name: Create dev templates
  block:
    - name: Wait for dev server to start
      ansible.builtin.pause:
        seconds: 30

    - name: Run populate templates script
      ansible.builtin.shell:
        chdir: "{{dev_root_dir}}/ct-visualisation-app/docs/api/examples"
        cmd: |
          export CONCERTIM_HOST=localhost
          export AUTH_TOKEN=$(LOGIN=admin PASSWORD=admin ./get-auth-token.sh)
          if [ $(./list-templates.sh | jq 'length') -eq 0 ] ; then
            echo "Populating dev templates"
            ./populate-templates.sh
          else
            echo "Templates previously populated"
          fi
