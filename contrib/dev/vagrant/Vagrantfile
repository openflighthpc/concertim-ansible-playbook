CT_SRC_DIR = [ ENV['FLIGHT_CODE'], "#{ENV['HOME']}/projects/concertim/src" ]
  .compact
  .map { |p| File.expand_path(p) }
  .detect { |p| File.directory?(p) }

# DEV_ANSIBLE_DIR contains the path to the old ansible playbook.  The old
# playbook is now only used to setup a development environment for developing
# concertim components and will eventually disappear.
DEV_ANSIBLE_DIR="../../../ansible"

# PROD_ANSIBLE_DIR contains the path to the new ansible playbook.  The new
# playbook is currently used to setup a production environment.  Eventually, it
# will also setup an environment for developing the concertim components.
PROD_ANSIBLE_DIR="../../../production"

MACHINES = [
  {
    name: "dev1",
    box: "ubuntu/jammy64",
  },
  {
    name: "dev2",
    box: "ubuntu/jammy64",
  },
  {
    name: "asset-build",
    box: "ubuntu/jammy64",
  }
]

Vagrant.configure("2") do |config|
  MACHINES.each_with_index do |box, idx|
    config.vm.provider "virtualbox" do |v|
      # v.memory = 8192
      # v.memory = 4096
      # v.memory = 3072
      # v.memory = 2048
      # v.memory = 1024
      v.memory = 512
    end

    config.vm.define box[:name], primary: idx == 0 do |v|
      v.vm.box = box[:box]
      v.vm.hostname = "concertim-#{box[:name]}"
      v.vm.provider "virtualbox" do |p|
        # This needs to be nested inside the `config.vm.define` block to set
        # the name for just this box.
        p.name = "concertim_#{box[:name]}_#{Time.now.to_f.to_s.sub('.', '_')}"
      end

      # Forward HTTP/S ports at predictable host ports.  Redirection from HTTP
      # to HTTPS isn't expected to work with these ports.
      if ENV['BUILD_ENV'] == 'prod'
        v.vm.network "forwarded_port", guest: 7080, host: 9080 + idx + 1, host_ip: '127.0.0.1'
        v.vm.network "forwarded_port", guest: 7443, host: 9443 + idx + 1, host_ip: '127.0.0.1'
      else
        v.vm.network "forwarded_port", guest:  80, host: 9080 + idx + 1, host_ip: '127.0.0.1'
        v.vm.network "forwarded_port", guest: 443, host: 9443 + idx + 1, host_ip: '127.0.0.1'
      end

      v.vm.provision "swap",
        type: "shell",
        path: "scripts/create-swap.sh",
        run: "never"
      v.vm.provision "apt-upgrade",
        type: "shell",
        inline: "apt-get -y update && apt-get -y upgrade",
        run: "never"

      unless to_boolean(ENV['ACCEPTANCE'])
        if ENV['BUILD_ENV'] == 'prod'
          v.vm.synced_folder PROD_ANSIBLE_DIR, "/ansible-prod"
        else
          v.vm.synced_folder DEV_ANSIBLE_DIR, "/ansible-dev"
          if File.directory?(CT_SRC_DIR)
            v.vm.synced_folder CT_SRC_DIR, "/opt/concertim/dev"
          end
        end

        if Vagrant.has_plugin?("vagrant-notify-forwarder")
          # Notify forwarder forwards notifications for file system changes.
          # This enables quick dev reloading in rails apps and air.
          v.notify_forwarder.port = 22021
        else
          $stderr.puts <<~EOF
          WARNING: vagrant-notify-forwarder is not installed.

          Run the following for a much better development experience.

          vagrant plugin install vagrant-notify-forwarder

          EOF
        end

        # Build the VM in the same was as the ansible README instructions
        # state.  These are only available when `ACCEPTANCE` has not been defined.
        v.vm.provision "install_ansible",
          type: "shell",
          run: "never",
          path: "scripts/install-ansible.sh"
        v.vm.provision "install_docker",
          type: "shell",
          run: "never",
          path: "scripts/install-docker.sh"
        v.vm.provision "run_dev_playbook",
          type: "shell",
          run: "never",
          inline: <<-SH
            AWS_ACCESS_KEY_ID=#{ENV.fetch('AWS_ACCESS_KEY_ID', '')} AWS_SECRET_ACCESS_KEY=#{ENV.fetch('AWS_SECRET_ACCESS_KEY', '')} /vagrant/scripts/run-dev-playbook.sh
          SH
        v.vm.provision "run_prod_playbook",
          type: "shell",
          run: "never",
          inline: <<-SH
            GH_TOKEN=#{ENV.fetch('GH_TOKEN', '')} /vagrant/scripts/run-prod-playbook.sh
          SH

      end
    end
  end
end

def to_boolean(v)
  case v
  when /true/i, /yes/i, "1"
    true
  else
    false
  end
end
